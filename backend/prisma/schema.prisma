generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  regionId  String
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]

  @@index([email])
  @@index([regionId])
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([token])
  @@index([userId])
}

model Customer {
  id              String         @id @default(uuid())
  regionId        String
  businessName    String
  contactName     String
  email           String
  phone           String
  street          String
  city            String
  province        String         @default("BC")
  postalCode      String
  notes           String?
  status          CustomerStatus @default(ACTIVE)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  lastContactDate DateTime?
  appointments    Appointment[]
  invoices        Invoice[]

  @@index([regionId])
  @@index([businessName])
  @@index([email])
}

model Invoice {
  id            String         @id @default(uuid())
  invoiceNumber Int            @unique
  regionId      String
  customerId    String
  invoiceDate   DateTime       @default(now())
  dueDate       DateTime
  paidDate      DateTime?
  status        InvoiceStatus  @default(DRAFT)
  lineItems     Json
  subtotal      Decimal        @db.Decimal(10, 2)
  gstAmount     Decimal        @db.Decimal(10, 2)
  pstAmount     Decimal        @db.Decimal(10, 2)
  total         Decimal        @db.Decimal(10, 2)
  paymentMethod PaymentMethod?
  emailedAt     DateTime?
  emailedTo     String?
  notes         String?        @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  customer      Customer       @relation(fields: [customerId], references: [id])

  @@index([regionId])
  @@index([customerId])
  @@index([invoiceNumber])
  @@index([status])
  @@index([invoiceDate])
  @@index([dueDate])
}

model Appointment {
  id           String            @id @default(uuid())
  regionId     String
  title        String
  description  String?
  type         AppointmentType
  status       AppointmentStatus @default(SCHEDULED)
  customerId   String?
  startDate    DateTime
  endDate      DateTime
  allDay       Boolean           @default(false)
  location     String?
  reminderSent Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  customer     Customer?         @relation(fields: [customerId], references: [id])

  @@index([regionId])
  @@index([startDate])
  @@index([customerId])
}

model Settings {
  id          String   @id @default(uuid())
  category    String
  key         String
  value       Json
  regionId    String?
  description String?
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([category, key, regionId])
  @@index([regionId])
  @@index([category])
}

model InvoiceSequence {
  id               String   @id @default(uuid())
  regionId         String   @unique
  lastInvoiceNumber Int     @default(10000)
  prefix           String?
  suffix           String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([regionId])
}

enum UserRole {
  OWNER
  MANAGER
  FRANCHISEE
  EMPLOYEE
  VIEWER
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  PROSPECT
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CHEQUE
  E_TRANSFER
  CREDIT_CARD
  DEBIT
  OTHER
}

enum ServiceType {
  RESURFACING
  NEW_BOARD
  STAINLESS_INSERT
  STAINLESS_CLAMPS
  BOARD_MODIFICATIONS
  SPECIAL
}

enum AppointmentType {
  DELIVERY
  PICKUP
  SERVICE
  MEETING
  TASK
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}
